using Flurl.Http;
using Skill.Integration.Models;
using System.Text.Json;

namespace Skill.Integration.Services
{
    public class LightCastTokenService : ILightCastTokenService
    {
        private readonly IConfiguration _configuration;
        private LightCastAccessToken? _currentToken;
        private readonly object _lock = new();
        private static readonly JsonSerializerOptions _jsonOptions = new()
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            PropertyNameCaseInsensitive = true
        };

        public LightCastAccessToken? CurrentToken => _currentToken;

        public LightCastTokenService(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public async Task<string> GetValidTokenAsync(bool isOpen = false)
        {
            // Fast path - if token exists and is valid, return it without locking
            if (_currentToken?.IsValid() == true)
            {
                return _currentToken.AccessToken;
            }

            // Slow path - token needs to be generated
            lock (_lock)
            {
                // Double-check the token hasn't been generated by another thread while we were waiting
                if (_currentToken?.IsValid() == true)
                {
                    return _currentToken.AccessToken;
                }

                // Generate new token synchronously since we're already in a lock
                return GenerateNewTokenAsync(isOpen).GetAwaiter().GetResult().AccessToken;
            }
        }

        private async Task<LightCastAccessToken> GenerateNewTokenAsync(bool isOpen)
        {
            var clientId = isOpen ? _configuration["LightCastOpen:ClientId"] : _configuration["LightCast:ClientId"];
            var clientSecret = isOpen ? _configuration["LightCastOpen:ClientSecret"] : _configuration["LightCast:ClientSecret"];
            var scope = isOpen ? _configuration["LightCastOpen:Scope"] : _configuration["LightCast:Scope"];

            try
            {
                var response = await "https://auth.emsicloud.com/connect/token"
                    .WithHeader("Content-Type", "application/x-www-form-urlencoded")
                    .PostUrlEncodedAsync(new
                    {
                        client_id = clientId,
                        client_secret = clientSecret,
                        grant_type = "client_credentials",
                        scope
                    });

                string content = await response.GetStringAsync();
               // string content = "{\"access_token\":\"eyJhbGciOiJSUzI1NiIsImtpZCI6IjNDNjZCRjIzMjBGNkY4RDQ2QzJERDhCMjI0MEVGMTFENTZEQkY3MUYiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJQR2FfSXlEMi1OUnNMZGl5SkE3eEhWYmI5eDgifQ.eyJuYmYiOjE3MzAxNzc2OTYsImV4cCI6MTczMDE4MTI5NiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmVtc2ljbG91ZC5jb20iLCJhdWQiOlsiZW1zaV9vcGVuIiwiaHR0cHM6Ly9hdXRoLmVtc2ljbG91ZC5jb20vcmVzb3VyY2VzIl0sImNsaWVudF9pZCI6InRrYnVpczBrZXljYTByNmYiLCJuYW1lIjoiVmFuaSIsImNvbXBhbnkiOiJBRFZUIiwiZW1haWwiOiJ2YW5pLnVtZXNoQGFkdnQtZ3JvdXAuY29tIiwiaWF0IjoxNzMwMTc3Njk2LCJzY29wZSI6WyJlbXNpX29wZW4iXX0.me52HjADIz9IQauQx7Ziz8-7CmWxFt8aDqvvmW2gmcoeRMQbIyQ1An6Bpct2QmQ_SHmxZZlMl2Qj8vTo-vDj8wHPqeJ5Kk0xPB_dGWThIv1IAjh32iRNCV9OH7HbnjIFOmsVlQLuSQaOxy7IXnh4bET02nZLgwlHFtZ92CzGyk3K4WV4oaYDuPkfs3yNv2A9UhzCYR7iOWzPnWedoSQuMqKcRbh63GQuAW-I1uAM1h-ab8226Of8qk_wEpALo2gN0z4rf_8G1z9mKdCDsXTa1Z2-RYsx4Sy-yPMjYaSywgtXUeAYrDUkurnirsQSkW0Ljmb52QGjaifR3wYuYydC1Q\",\"expires_in\":3600,\"token_type\":\"Bearer\",\"scope\":\"emsi_open\"}";

                _currentToken = JsonSerializer.Deserialize<LightCastAccessToken>(content, _jsonOptions);

                if (_currentToken == null)
                {
                    throw new Exception("Failed to deserialize token response");
                }

                return _currentToken;
            }
            catch (FlurlHttpException ex)
            {
                var errorMessage = await ex.GetResponseStringAsync();
                throw new Exception($"Failed to generate token: {errorMessage}", ex);
            }
        }
    }
}
